#!/usr/bin/env python3
"""Migrate metadata from turnagain-pass.geojson to MDX files with YAML frontmatter.

This was run once as a migration to move from the old format where all routes
were stored in a single GeoJSON file, to the new format where each route has
its own MDX file with YAML frontmatter.

run as `uv run scripts/migrate-metadata-to-mdx.py`
Generated by claude sonnet 4.
"""
# /// script
# dependencies = ["PyYAML"]
# ///

import json
from pathlib import Path

import yaml


def migrate_metadata():
    """Extract metadata from GeoJSON and add YAML frontmatter to corresponding MDX files."""
    geojson_path = Path("public/turnagain-pass.geojson")
    mdx_dir = Path("app/routes/pages")

    if not geojson_path.exists():
        print(f"Error: {geojson_path} not found")
        return

    with open(geojson_path) as f:
        geojson_data = json.load(f)

    for feature in geojson_data["features"]:
        feature_id = feature["id"]
        properties = feature["properties"]
        geometry = feature["geometry"]

        mdx_file = mdx_dir / f"{feature_id}.mdx"

        if not mdx_file.exists():
            print(f"Warning: {mdx_file} not found, skipping")
            continue

        with open(mdx_file) as f:
            content = f.read()

        # Extract existing frontmatter if present
        if content.startswith("---\n"):
            end_marker = content.find("\n---\n", 4)
            if end_marker != -1:
                content = content[end_marker + 5 :].lstrip("\n")

        frontmatter = {
            "id": feature_id,
            "title": properties.get("title", ""),
            "feature_type": properties.get("feature_type", ""),
        }

        # Add optional fields if they exist
        optional_fields = [
            "area",
            "description",
            "thumbnail",
            "nicks_ates_ratings",
            "latitude",
            "longitude",
            "distance",
            "elevation_min",
            "elevation_max",
            "total_ascent",
            "total_descent",
            "elevation",
        ]

        for field in optional_fields:
            if field in properties and properties[field]:
                value = properties[field]
                # Convert comma-separated strings to lists for ratings
                if field == "nicks_ates_ratings" and isinstance(value, str):
                    value = [rating.strip() for rating in value.split(",")]
                frontmatter[field] = value

        # Add geometry as JSON string
        frontmatter["geojson"] = json.dumps(geometry, indent=2)

        def represent_string(dumper, data):
            """Custom representer to handle multiline strings."""
            if "\n" in data:
                # Use block style for multiline strings
                return dumper.represent_scalar("tag:yaml.org,2002:str", data, style=">")
            else:
                # Use plain style for single-line strings
                return dumper.represent_scalar("tag:yaml.org,2002:str", data)

        yaml.add_representer(str, represent_string)

        # Create YAML frontmatter
        yaml_content = yaml.dump(frontmatter, sort_keys=True)

        # Combine frontmatter with existing content
        new_content = f"---\n{yaml_content}---\n\n{content}"

        with open(mdx_file, "w") as f:
            f.write(new_content)

        print(f"Updated {mdx_file}")

    print("Migration complete!")


if __name__ == "__main__":
    migrate_metadata()
